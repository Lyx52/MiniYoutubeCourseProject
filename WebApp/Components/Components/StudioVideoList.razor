@using Domain.Entity
@using Domain.Interfaces
@using Domain.Constants
@using Domain.Model
@using System.Collections.Concurrent
@inject IVideoHttpClient _videoHttpClient
<div class="row">
    <div class="col-12">
        <Grid @ref="_videoGrid" TItem="Video"
              Class="table table-hover table-bordered table-striped"
              DataProvider="UserVideoDataProvider"
              AllowPaging="true"
              Responsive="true">
        
            <GridColumn TItem="Video" HeaderText="Title" PropertyName="Title" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                @context.Title
            </GridColumn>
            <GridColumn TItem="Video" HeaderText="Created" PropertyName="Created" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >
                @context.Created.ToString("dd.MM.yyyy")
            </GridColumn>
            <GridColumn TItem="Video" HeaderText="Views" PropertyName="ViewCount" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >
                @context.ViewCount views
            </GridColumn>
            <GridColumn TItem="Video" HeaderText="Status" PropertyName="Status" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >
                @switch (context.Status)
                {
                    case VideoProcessingStatus.CreatedMetadata:
                    {
                        <div class="d-flex flex-row align-items-center justify-content-center">
                            <span>Draft</span>
                        </div>
                    } break;
                    case VideoProcessingStatus.Processing:
                    {
                        <div class="d-flex flex-row align-items-center justify-content-center">
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Processing...</span>
                            </div>
                            <span>Processing...</span>
                        </div>
                    } break;
                    case VideoProcessingStatus.Deleting:
                    {
                        <div class="d-flex flex-row align-items-center justify-content-center">
                            <div class="spinner-border spinner-border-sm me-2" role="status">
                                <span class="visually-hidden">Deleting...</span>
                            </div>
                            <span>Deleting...</span>
                        </div>
                    } break;
                    case VideoProcessingStatus.ProcessingFailed:
                    {
                        <div class="d-flex flex-row align-items-center justify-content-center">
                            <i class="bi bi-exclamation-circle me-2"></i>
                            <span>Processing failed</span>
                        </div>
                    } break;
                    case VideoProcessingStatus.ProcessingFinished:
                    {
                        <div class="d-flex flex-row align-items-center justify-content-center">
                            <i class="bi bi-check-circle me-2"></i>
                            <span>Processing finished</span>
                        </div>
                    } break;
                    case VideoProcessingStatus.Published:
                    {
                        <div class="d-flex flex-row align-items-center justify-content-center">
                            <i class="bi bi-share me-2"></i>
                            <span>
                                Published
                                @if (context.IsUnlisted)
                                {
                                    @: (Private)
                                }
                            </span>
                        </div>
                    } break;
                }
            </GridColumn>
            <GridColumn TItem="Video" HeaderText="Actions" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center" >
                <div class="btn-group" role="group" aria-label="Video action button group">
                    @if (ProcessingActions[context.Id])
                    {
                        <div class="spinner-border spinner-border-sm me-2" role="status">
                            <span class="visually-hidden">Processing...</span>
                        </div>
                    }
                    else
                    {
                        @if (context.Status is VideoProcessingStatus.ProcessingFinished)
                        {
                            <button type="button" class="btn btn-outline-dark" @onclick="() => OnPublishVideo(context)">
                                Publish
                            </button>
                        }

                        @if (context.Status is VideoProcessingStatus.ProcessingFinished or VideoProcessingStatus.Published)
                        {
                            <button type="button" class="btn btn-outline-dark" @onclick="() => OnChangeVisibility(context)">
                                Make @(context.IsUnlisted ? "public" : "private")
                            </button>
                            <button type="button" class="btn btn-outline-dark" @onclick="() => OnEditVideo(context)">Edit</button>
                            <button type="button" class="btn btn-outline-dark" @onclick="() => OnDeleteVideo(context)">Delete</button>
                        }
                    }
                </div>
            </GridColumn>
        </Grid>
    </div>
</div>
<VideoUpload @ref="_videoUploadModal" OnWorkflowComplete="OnVideoPublished" />
<VideoMetadataForm @ref="_videoEditForm" OnFormSubmit="OnVideoUpdated" />
@code {
    private VideoUpload _videoUploadModal;
    private VideoMetadataForm _videoEditForm;
    private Grid<Video> _videoGrid;
    private Timer? _publishTimer { get; set; }
    private AutoResetEvent _timerResetEvent { get; set; }
    private bool IsTimerLoaded { get; set; } = false;
    private ConcurrentDictionary<string, bool> ProcessingActions { get; set; } = new ConcurrentDictionary<string, bool>();
    private async Task<GridDataProviderResult<Video>> UserVideoDataProvider(GridDataProviderRequest<Video> request)
    {
        var response = await _videoHttpClient.GetUserVideos(request.PageNumber, request.PageSize);
        if (!response.Success) return new GridDataProviderResult<Video>();
        response.Videos.ToList().ForEach(v =>
        {
            ProcessingActions.TryAdd(v.Id, false);
        });
        if (!IsTimerLoaded)
        {
            InitVideoStateTimer();
        }
        return new GridDataProviderResult<Video>()
        {
            Data = response.Videos,
            TotalCount = response.TotalCount
        };
    }
    private void InitVideoStateTimer()
    {
        IsTimerLoaded = true;
        _timerResetEvent = new AutoResetEvent(false);
        _publishTimer = new Timer( async (_) =>
        {
            try
            {
                await _videoGrid.RefreshDataAsync();
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception e)
            {
                // TODO: Weird random exception
                Console.WriteLine(e.Message);
            }
        }, _timerResetEvent, 2500L, 2500L);
    }
    public async Task OpenUploadModal(bool reset)
    {
        await _videoUploadModal.OpenModalAsync(reset);
    }
    private async Task OnPublishVideo(Video video)
    {
        _videoUploadModal.VideoId = Guid.Parse(video.Id);
        await _videoUploadModal.ChangeStage(VideoUploadStage.SubmitStage);
    }
    private async Task OnChangeVisibility(Video video)
    {
        ProcessingActions[video.Id] = true;
        await _videoHttpClient.ChangeVideoVisibility(Guid.Parse(video.Id), !video.IsUnlisted);
        await _videoGrid.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
        ProcessingActions[video.Id] = false;
    }

    private async Task OnDeleteVideo(Video video)
    {
        ProcessingActions[video.Id] = true;
        video.Status = VideoProcessingStatus.Deleting;
        await _videoHttpClient.DeleteVideo(Guid.Parse(video.Id));
        await _videoGrid.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnEditVideo(Video video)
    {
        await _videoEditForm.OpenEditModalAsync(video);
    }

    private async Task OnVideoUpdated(Guid videoId)
    {
        await _videoEditForm.CloseModalAsync();
        await _videoGrid.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnVideoPublished(Guid videoId)
    {
        await InvokeAsync(StateHasChanged);
    }
}