@using System.Globalization
@using Domain.Constants
@using Domain.Interfaces
@using Domain.Model.View
@using System.Collections
@using Domain.Model.Query
@inject PreloadService _preloadService
@inject IVideoHttpClient _videoHttpClient

<div class="container-fluid">
    <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3">
        @foreach (var video in _videos)
        {
            <VideoCard Video="@video"/>    
        }
    </div>
    <div class="row mt-5">
        <div class="col-12">
            <div class="d-flex justify-content-center">
                <button class="btn btn-outline-dark w-50" @onclick="LoadMoreVideos">Load more</button>
            </div>
        </div>
    </div>
</div>
<Preload Class="preload-block" />
@code {
    private List<VideoPlaylistModel> _videos = new List<VideoPlaylistModel>();
    public int CurrentOffset { get; set; } = 0;
    private bool IsLoaded { get; set; }
    protected override async Task OnInitializedAsync()
    {
        _videos = new List<VideoPlaylistModel>();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !IsLoaded)
        {
            await LoadMoreVideos();
            await InvokeAsync(StateHasChanged);
            IsLoaded = true;
        }
    }

    private async Task LoadMoreVideos()
    {
        _preloadService.Show();
        var response = await _videoHttpClient.GetVideoPlaylist(CurrentOffset, 12);
        _videos.AddRange(response.Videos);
        await InvokeAsync(StateHasChanged);
        _preloadService.Hide();
        //CurrentOffset += response.Videos.Count();
    }
}