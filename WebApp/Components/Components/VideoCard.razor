@using Domain.Model
@using Domain.Model.Configuration
@using Domain.Model.View
@using Domain.Constants
@using System.Text.Json
@using Domain.Interfaces
@inject AppConfiguration _configuration
@inject NavigationManager _navigationManager
@inject IUserHttpClient _userHttpClient

@if (IsPlaylistView)
{
  
}
else
{
  <div class="col video-card-container">
    <div class="card border-0 video-card">
      <div class="gap-3 card-body d-flex justify-content-between video-card-body">
        <figure class="figure">
          @{
            var videoId = @Guid.Parse(Video.VideoId).ToEncodedId();
            <NavLink href="@($"/watch/{videoId}")" Match="NavLinkMatch.All" @onclick="OnVideoClicked" @onmouseover="OnMouseOver" @onmouseleave="OnMouseLeave" class="text-decoration-none cursor-pointer">
              @if (IsMouseOver)
              {
                <img src="@GetSourceLink(Video.PosterGif!.Id)" class="figure-img img-fluid rounded mb-1 w-100" alt="poster gif">
              }
              else
              {
                <img src="@GetSourceLink(Video.Poster!.Id)" class="figure-img img-fluid rounded mb-1" alt="poster image">
              }
            </NavLink>
          }
          <figcaption class="figure-caption">
            <div class="d-inline-flex w-100">
              @{
                var creatorId = @Guid.Parse(Video.CreatorId).ToEncodedId();
                <NavLink href="@($"/creator/{creatorId}")" Match="NavLinkMatch.All">
                  <img src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="CreatorIconLink" class="rounded-circle profile-icon"/>
                </NavLink>
              }
              <div class="ms-3 d-flex flex-column">
                <p class="fs-5 mb-1 text-break">@Video.Title</p>
                <p class="small mb-0">@Video.CreatorName</p>
                <p class="small mb-0 text-body-secondary">@GetCreatedDate()</p>
              </div>
            </div>
          </figcaption>
        </figure>
      </div>
    </div>
  </div>
}

@code {
  [Parameter]
  public VideoPlaylistModel Video { get; set; }

  [Parameter]
  public bool IsPlaylistView { get; set; }

  private string CreatorIconLink = "./favicon.png";
  private bool IsMouseOver { get; set; }
  private bool IsLoaded { get; set; }
  private string GetSourceLink(string sourceId)
  {
    return $"{_configuration.ApiEndpoint}/api/Content/Source?videoId={Video.VideoId}&sourceId={sourceId}";
  }

  private void OnVideoClicked()
  {
    _navigationManager.NavigateTo($"/watch/{Guid.Parse(Video.VideoId).ToEncodedId()}", true, true);    
  }

  public async Task OnMouseOver()
  {
    IsMouseOver = true;
    await InvokeAsync(StateHasChanged);
  }
  public async Task OnMouseLeave()
  {
    IsMouseOver = false;
    await InvokeAsync(StateHasChanged);
  }

  public string GetCreatedDate()
  {
    var diff = DateTime.UtcNow - Video.Created.ToUniversalTime();
    if (diff.TotalDays is >= 1 and <= 30) return $"{diff.TotalDays:F0} days ago";
    if (diff.TotalHours is >= 1 and <= 23) return $"{diff.TotalHours:F0} hours ago";
    if (diff.TotalMinutes is >= 1 and <= 60) return $"{diff.TotalMinutes:F0} min ago";
    if (diff.TotalSeconds is >= 1 and <= 60) return $"{diff.TotalSeconds:F0} sec ago";
    return string.Empty;
  }
}