@using Domain.Entity
@using Domain.Interfaces
@using Domain.Model.View
@inject IVideoHttpClient _videoHttpClient
<div class="row">
    <div class="col-12">
        <Grid @ref="_playlistGrid" TItem="PlaylistModel"
              Class="table table-hover table-bordered table-striped"
              DataProvider="UserPlaylistDataProvider"
              AllowPaging="true"
              Responsive="true">
            <GridColumn TItem="PlaylistModel" HeaderText="Title" PropertyName="Title" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                @context.Title
            </GridColumn>
            <GridColumn TItem="PlaylistModel" HeaderText="Videos" PropertyName="Videos" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                @context.Videos.Count() videos
            </GridColumn>
            <GridColumn TItem="PlaylistModel" HeaderText="Actions" HeaderTextAlignment="Alignment.Center" TextAlignment="Alignment.Center">
                <div class="btn-group" role="group" aria-label="Video action button group">
                    <SpinnerButton IsToggle="@false" CssClasses="studio-action-btn" OnClick="async () => await OnEditPlaylist(context)">
                        <Body>
                        Edit
                        </Body>    
                    </SpinnerButton>
                    <SpinnerButton IsToggle="@false" CssClasses="studio-action-btn" OnClick="async () => await OnDeletePlaylist(context)">
                        <Body>
                        Delete
                        </Body>    
                    </SpinnerButton>
                </div>
            </GridColumn>
        </Grid>
    </div>
</div>
<EditPlaylistForm @ref="_editPlaylistForm" OnFormSubmit="OnModalSubmit" />
@code {
    private Grid<PlaylistModel> _playlistGrid;
    private List<PlaylistModel> _playlists = new List<PlaylistModel>();
    private EditPlaylistForm _editPlaylistForm;
    private bool IsLoaded { get; set; }
    private static GridDataProviderResult<PlaylistModel> EmptyResult = new GridDataProviderResult<PlaylistModel>()
    {
        Data = new List<PlaylistModel>(),
        TotalCount = 0
    };
    private async Task<GridDataProviderResult<PlaylistModel>> UserPlaylistDataProvider(GridDataProviderRequest<PlaylistModel> request)
    {
        if (IsLoaded)
            return new GridDataProviderResult<PlaylistModel>()
            {
                Data = _playlists.Skip(Math.Max(0, (request.PageNumber - 1) * request.PageSize)).Take(request.PageSize),
                TotalCount = _playlists.Count
            };
        var response = await _videoHttpClient.GetUserPlaylists();
        if (!response.Success) return EmptyResult;
        _playlists = response.Playlists.ToList();
        IsLoaded = true;
        return new GridDataProviderResult<PlaylistModel>()
        {
            Data = _playlists.Skip(Math.Max(0, (request.PageNumber - 1) * request.PageSize)).Take(request.PageSize),
            TotalCount = _playlists.Count
        };
    }

    private Task OnEditPlaylist(PlaylistModel playlist)
    {
        return _editPlaylistForm.OpenEditModal(new EditPlaylistModel()
        {
            Title = playlist.Title,
            Videos    = playlist.Videos.ToList(),
            PlaylistId = playlist.PlaylistId
        });           
    }
    
    private async Task OnDeletePlaylist(PlaylistModel playlist)
    {
        await _videoHttpClient.DeletePlaylist(playlist.PlaylistId);
        IsLoaded = false;
        await _playlistGrid.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }

    public Task OpenCreatePlaylistModal(bool reset)
    {
        return _editPlaylistForm.OpenModal(reset);
    }

    public async Task OnModalSubmit(Guid playlistId)
    {
        await _editPlaylistForm.CloseModal();
        IsLoaded = false;
        await _playlistGrid.RefreshDataAsync();
        await InvokeAsync(StateHasChanged);
    }
}