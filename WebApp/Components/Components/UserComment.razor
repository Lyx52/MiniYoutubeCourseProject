@rendermode InteractiveServer
<div class="col d-inline-flex user-comment">
    <div class="creator-icon">
        <img src="@UserIconLink" alt="UserIconLink">
    </div>
    <div class="ms-3 d-flex flex-column w-100">
        @if (IsNewComment)
        {
            <EditForm EditContext="@_commentContext"  >
                <div class="d-flex flex-column">
                    <input @onfocusin="OnFocusCommentInput" class="form-control border-0 border-bottom shadow-none"/>
                    @if (NewCommentInFocus)
                    {
                        <div class="mt-2 ms-auto d-flex flex-row">
                            <button class="btn border-0" @onclick="OnClickCancel">Cancel</button>
                            <button type="submit" class="btn btn-outline-secondary">Comment</button>
                        </div>
                    }
                </div>
            </EditForm>
        }
        else
        {
            <div class="d-flex flex-column">
                <p class="fs-5 mb-1">
                    @Username
                </p>
                <p class="small">
                    @Comment
                </p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public bool IsNewComment { get; set; } 
    public bool NewCommentInFocus { get; set; }
    private EditContext _commentContext { get; set; }
    public string UserIconLink = "/favicon.png";
    public string? Username { get; set; } = "Lyx.#";
    public string? Comment { get; set; } = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s";
    protected override async Task OnInitializedAsync()
    {
        _commentContext = new EditContext(new { Text = string.Empty });
    }
    public void OnClickCancel()
    {
        NewCommentInFocus = false;
    }
    public void OnFocusCommentInput()
    {
        NewCommentInFocus = true;
    }
}