@using Domain.Interfaces
@using System.ComponentModel.DataAnnotations
@using Domain.Constants
@using Domain.Model.View
@rendermode InteractiveServer
@inject ICommentHttpClient _commentHttpClient
<div class="col d-inline-flex user-comment">
    <div class="creator-icon">
        <img src="@UserIconLink" alt="UserIconLink">
    </div>
    <div class="ms-3 d-flex flex-column w-100">
        @if (IsNewComment)
        {
            <div class="d-flex flex-column">
                <InputText @onfocusin="OnFocusCommentInput" @bind-Value="CommentText" class="form-control border-0 border-bottom shadow-none" />
                @if (NewCommentInFocus)
                {
                    <div class="mt-2 ms-auto d-flex flex-row">
                        <button class="btn border-0" @onclick="OnClickCancel">Cancel</button>
                        <button @onclick="OnCommentSubmit" class="btn btn-outline-secondary">Comment</button>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="d-flex flex-column">
                <p class="fs-5 mb-1">
                    @User.Username
                </p>
                <p class="small text-break @(IsFullText ? string.Empty : "text-truncate") mb-0">
                    @Comment.Message
                </p>
                <div class="d-inline-flex">
                    <AuthorizeView>
                        <Authorized>
                            <button class="btn btn-comment-action" @onclick="OnLikeClick">
                                <i class="bi @(Comment.Impression is ImpressionType.Like ? "bi-hand-thumbs-up-fill" : "comment-like-button")"></i>@Comment.Likes
                            </button>
                            <button class="btn btn-comment-action" @onclick="OnDislikeClick">
                                <i class="bi @(Comment.Impression is ImpressionType.Dislike ? "bi-hand-thumbs-down-fill" : "comment-dislike-button")"></i>@Comment.Dislikes
                            </button>    
                        </Authorized>
                        <NotAuthorized>
                            <span>
                                <i class="bi bi-hand-thumbs-up-fill"></i>@Comment.Likes
                            </span>
                            <span class="ms-2">
                                <i class="bi bi-hand-thumbs-down-fill"></i>@Comment.Dislikes
                            </span>   
                        </NotAuthorized>
                    </AuthorizeView>
                    
                    @if (Comment.Message.Length > 80)
                    {
                        <button class="btn btn-comment-action" @onclick="OnOpenCloseComment">
                            <i class="bi @(IsFullText ? "bi-three-dots-vertical" : "bi-three-dots")"></i>
                        </button>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [CascadingParameter(Name = "Metadata")]
    public VideoMetadataModel Model { get; set; }
    
    [Parameter]
    public bool IsNewComment { get; set; } 
    
    [Parameter]
    public UserModel User { get; set; }
    
    [Parameter]
    public CommentModel Comment { get; set; }
    
    [Parameter]
    public EventCallback OnSubmit { get; set; }
    private bool IsFullText { get; set; } = false;
    private bool NewCommentInFocus { get; set; }
    private string UserIconLink = "/favicon.png";
    private string CommentText { get; set; } = string.Empty;
    private DateTime LastUpdated { get; set; } = DateTime.UtcNow;

    private void OnClickCancel()
    {
        NewCommentInFocus = false;
    }
    private void OnFocusCommentInput()
    {
        NewCommentInFocus = true;
    }
    private async Task OnCommentSubmit()
    {
        if (CommentText is { Length: <= 3 }) return;
        await _commentHttpClient.CreateComment(Model.VideoId, CommentText);
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync();
        }
        CommentText = string.Empty;
        NewCommentInFocus = false;
    }

    private Task OnLikeClick() => OnImpressionClick(ImpressionType.Like);
    private Task OnDislikeClick() => OnImpressionClick(ImpressionType.Dislike);
    private async Task OnImpressionClick(ImpressionType impression)
    {
        if (DateTime.UtcNow - LastUpdated <= TimeSpan.FromSeconds(1)) return;
        ImpressionType impressionType = Comment.Impression == impression ? ImpressionType.None : impression;
        await _commentHttpClient.AddCommentImpression(Comment.Id, impressionType);
        if (Comment.Impression == ImpressionType.Dislike) Comment.Dislikes--;
        if (Comment.Impression == ImpressionType.Like) Comment.Likes--;
        Comment.Impression = impressionType;
        if (impressionType == ImpressionType.Dislike) Comment.Dislikes++;
        if (impressionType == ImpressionType.Like) Comment.Likes++;
        LastUpdated = DateTime.UtcNow;
        await InvokeAsync(StateHasChanged);
    }

    private Task OnOpenCloseComment()
    {
        IsFullText = !IsFullText;
        return InvokeAsync(StateHasChanged);
    }
}