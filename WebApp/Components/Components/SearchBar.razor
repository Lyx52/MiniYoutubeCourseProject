@using Domain.Entity
@using Domain.Interfaces
@using Domain.Constants
@inject IVideoHttpClient _videoHttpClient
@inject NavigationManager _navigationManager
<div class="dropdown search-bar">
    <input @bind="_videoTitle" 
           @oninput="OnTextInput"
           @onfocusout="OnMouseLeave"
           class="form-control search-bar-autocomplete" 
           data-bs-toggle="dropdown" />
    <ul class="dropdown-menu w-100">
        @if (_videos.Any())
        {
            @foreach (var video in _videos)
            {
                <li class="w-100" @onclick=@(async (e) => await OnVideoSelected(video))>
                    <a class="dropdown-item" href="#">@video.Title</a>
                </li>
            }
        }
        else if (IsLoading) 
        {
            <li class="ms-3 w-100">
                <div class="spinner-grow spinner-grow-sm" role="status">
                    <span class="visually-hidden user-select-none">Loading...</span>
                </div>
                <small class="ms-2 text-secondary user-select-none">Searching...</small>
            </li>
        }
        else
        {
            <li class="w-100">
                <a class="dropdown-item" href="#">No results</a>
            </li>
        }
    </ul>
</div>
@code {
    private string _videoTitle;
    private IEnumerable<Video> _videos = new List<Video>();
    private static IEnumerable<Video> Empty = new List<Video>();
    private bool IsLoading { get; set; } = false;
    private async Task OnTextInput(ChangeEventArgs e)
    {
        var filter = e.Value?.ToString();
        if (filter?.Length > 2)
        {
            IsLoading = true;
            await InvokeAsync(StateHasChanged);
            var response = await _videoHttpClient.GetVideosByTitle(filter, 0, 20);
            _videos = response.Success ? response.Videos : Empty;
            await Task.Delay(150);
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnMouseLeave()
    {
        await Task.Delay(150);
        await ResetFilter();
    }

    private async Task ResetFilter()
    {
        _videoTitle = string.Empty;
        _videos = new List<Video>();
        await InvokeAsync(StateHasChanged);
    }
    private async Task OnVideoSelected(Video? video)
    {
        if (video is null) return;
        IsLoading = false;
        if (Guid.TryParse(video.Id, out var videoId))
        {
            _navigationManager.NavigateTo($"/watch/{videoId.ToEncodedId()}", false, true);    
        }

        await ResetFilter();
    }
}