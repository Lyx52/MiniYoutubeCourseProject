@using Domain.Interfaces
@using Domain.Model.Query
@using Domain.Model.View
@inject PreloadService _preloadService
@inject IVideoHttpClient _videoHttpClient
@if (!string.IsNullOrEmpty(PlaylistName))
{
    <div class="col-12">
        <h4>@PlaylistName</h4>
    </div>    
}
@if (HorizontalPlaylist)
{
    <div class="col-12 col-md-1 d-flex flex-column justify-content-center">
        <button class="btn btn-outline-dark h-100 p-0 playlist-button @(CurrentOffset > 0 ? string.Empty : "disabled")" @onclick="LoadPreviousVideos">
            <i class="bi bi-caret-left"></i>
        </button>
    </div>
    <div class="col-10 container-fluid video-playlist-container">
        <div class="row row-cols-1 row-cols-md-5">
            @for (int i = 0; i < VideoCount; i++)
            {
                @if (_videos.Count - 1 >= i)
                {
                    <VideoCard Video="@_videos[i]" ShowCreatorInfo="ShowCreatorInfo"/>    
                }
                else
                {
                    <div class="col video-card-container"></div>
                }
            }
        </div>
    </div>
    <div class="col-12 col-md-1 d-flex flex-column justify-content-center">
        <button class="btn btn-outline-dark h-100 p-0 playlist-button ms-auto" @onclick="LoadNextVideos">
            <i class="bi bi-caret-right"></i>
        </button>
    </div>
}
else
{
    <div class="container-fluid video-playlist-container">
        <div class="row row-cols-1">
            @foreach (var video in _videos)
            {
                <VideoCard Video="@video" ShowCreatorInfo="ShowCreatorInfo"/>
            }
        </div>
        <div class="row row-cols-1 my-3">
            <div class="col">
                <div class="d-flex justify-content-center">
                    <button class="btn btn-outline-dark w-75" @onclick="LoadNextVideos">Load more</button>
                </div>
            </div>
        </div>     
    </div>
}
<Preload Class="preload-block" />
@code {
    [Parameter]
    public bool HorizontalPlaylist { get; set; }

    [Parameter] 
    public bool ShowCreatorInfo { get; set; } = true;
    
    [Parameter]
    public Guid? CreatorId { get; set; }
    
    [Parameter]
    public int VideoCount { get; set; }

    [Parameter] public string PlaylistName { get; set; } = string.Empty;
    
    private List<VideoPlaylistModel> _videos = new List<VideoPlaylistModel>();
    public int CurrentOffset { get; set; } = 0;
    protected override async Task OnInitializedAsync()
    {
        _videos = new List<VideoPlaylistModel>();
        await LoadMoreVideos(0);
    }
    
    private Task LoadPreviousVideos() => LoadMoreVideos(Math.Max(0, CurrentOffset - 1));

    private Task LoadNextVideos() => LoadMoreVideos(CurrentOffset + 1);
    
    private async Task LoadMoreVideos(int offset)
    {
        _preloadService.Show();
        var response = await _videoHttpClient.GetVideoPlaylist(offset * VideoCount, VideoCount, CreatorId, true);
        if (response.Videos.Any())
        {
            CurrentOffset = offset;
            _videos = response.Videos.ToList();
        }
        await InvokeAsync(StateHasChanged);
        _preloadService.Hide();
    }
}