@using Domain.Model
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
<SpinnerContainer CssClasses="video-spinner" @ref="_spinner" IsSpinning="@true">
	<SpinnerBody>
		<div class="video-player">
        	<video id="main-video-player" @ref="_player"
        	       class="video-js"
        	       controls
        	       preload="auto">
        	</video>
        </div>	
	</SpinnerBody>
</SpinnerContainer>
@code {
	public event Action<string> VideoPlayerReady;
	private ElementReference? _player;
	private SpinnerContainer _spinner;
	private bool IsInitialized { get; set; } = false;
	private bool IsLoading { get; set; } = false;
	public async Task InitializeVideoPlayer(List<VideoSourceModel> sources)
	{
		if (IsLoading) return;
		await _spinner.StartSpinning(true);
		IsLoading = true;
		if (IsInitialized)
		{
			await JSRuntime.InvokeVoidAsync("loadPlayerSources", sources, DotNetObjectReference.Create(this));
		}
		else
		{
			await JSRuntime.InvokeVoidAsync("loadPlayer", _player, new
			{
				autoplay = false,
				fluid = true,
				aspectRatio = "16:9"
			}, sources, DotNetObjectReference.Create(this));
		}
	}

	private async Task DestroyVideoPlayer()
	{
		IsInitialized = false;
		await JSRuntime.InvokeVoidAsync("destroyPlayer", _player, DotNetObjectReference.Create(this));
	}
	[JSInvokable]
	public async Task OnVideoPlayerReady(string message)
	{
		IsInitialized = true;
		IsLoading = false;
		await _spinner.StopSpinning(true);
	}

	public async ValueTask DisposeAsync()
	{
		try
		{
			await DestroyVideoPlayer();
		}
		catch (Exception _)
		{
			// NOTE: Suppress JS Disconnected exception when reloading page
		}
		GC.SuppressFinalize(this);
	}

}