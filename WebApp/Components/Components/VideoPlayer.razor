@using Domain.Model
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable
<div class="video-player">
	<video id="main-video-player" @ref="_player" 
	       class="video-js" 
	       controls 
	       preload="auto">
	</video>
</div>
<HeadContent>
	<link rel="stylesheet" href="css/components/VideoPlayer.css" />
</HeadContent>
@code {
	public event Action<string> VideoPlayerReady;
	private ElementReference _player;
	private bool IsInitialized { get; set; }
	public async Task InitializeVideoPlayer(List<VideoSourceModel> sources)
	{
		if (IsInitialized) return;
		await JSRuntime.InvokeVoidAsync("loadPlayer", _player, new
		{
			autoplay = false,
			fluid = true,
			aspectRatio = "16:9"
		}, sources, DotNetObjectReference.Create(this));
		IsInitialized = true;
	}

	private async Task DestroyVideoPlayer()
	{
		IsInitialized = false;
		await JSRuntime.InvokeVoidAsync("destroyPlayer", _player, DotNetObjectReference.Create(this));
	}
	[JSInvokable]
	public void OnVideoPlayerReady(string message)
	{
		IsInitialized = true;
		Console.WriteLine(message);
	}

	public async ValueTask DisposeAsync()
	{
		try
		{
			await DestroyVideoPlayer();
		}
		catch (InvalidOperationException _)
		{
			// When reloading page ignore generated error, player will be reloaded anyway
		}
		GC.SuppressFinalize(this);
	}

}