@using Domain.Model.View
@using Domain.Interfaces
@inject ICommentHttpClient _commentHttpClient
<SpinnerContainer @ref="_spinner" IsSpinning="@false">
    <SpinnerBody>
        <div class="col container-fluid">
            <div class="row row-cols-1">
                <AuthorizeView>
                    <Authorized>
                        <UserComment IsNewComment="@true" OnSubmit="RefreshCommentSection"/>    
                    </Authorized>
                </AuthorizeView>
                @foreach (var comment in Comments)
                {
                    var user = Users[comment.UserId];
                    <UserComment User="user" Comment="comment"/>
                }
            </div>
        </div>
    </SpinnerBody>
</SpinnerContainer>
@code {
    [Parameter]
    public Guid VideoId { get; set; }

    public Dictionary<string, UserModel> Users { get; set; } = new Dictionary<string, UserModel>();
    public IEnumerable<CommentModel> Comments { get; set; } = new List<CommentModel>();
    private SpinnerContainer _spinner;
    
    public async Task LoadCommentSection(Guid videoId)
    {
        VideoId = videoId;
        await RefreshCommentSection();
    }

    public async Task RefreshCommentSection()
    {
        await _spinner.StartSpinning(true);
        var response = await _commentHttpClient.GetVideoComments(VideoId);
        if (response.Success)
        {
            Users = new Dictionary<string, UserModel>();
            foreach (var user in response.Users)
            {
                Users.Add(user.Id, user);
            }
            Comments = response.Comments.OrderByDescending(c => c.Created);
        }
        await _spinner.StopSpinning(false);
        await InvokeAsync(StateHasChanged);
    }
}