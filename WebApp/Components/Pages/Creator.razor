@page "/creator/{EncodedUserId}"
@using Domain.Interfaces
@using Domain.Model.View
@using Domain.Constants
@inject NavigationManager _navigationManager
@inject IUserHttpClient _userHttpClient
@if (CreatorModel is not null)
{
    <div class="container-fluid">
        <div class="row mb-3">
            <div class="d-flex">
                <div>
                    <img src="https://bootdey.com/img/Content/avatar/avatar7.png" alt="Admin" class="rounded-circle creator-icon-lg">
                </div>
                <div>
                    <h2>@CreatorModel.CreatorName</h2>
                    <span class="small">@SubscriberCount subscribers</span>
                    <AuthorizeView>
                        <Authorized>
                            <button class="btn my-auto btn-subscribe @(IsSubscribed ? "btn-dark" : "btn-outline-dark")" @onclick="OnSubscribeCreator">
                                @(IsSubscribed ? "Subscribed" : "Subscribe")
                            </button>    
                        </Authorized>
                    </AuthorizeView>
                </div>
            </div>
        </div>
        <div class="row">
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link cursor-pointer @(CurrentState == CreatorPageState.Home ? "active" : string.Empty)" @onclick="() => OnChangePage(CreatorPageState.Home)">Home</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link cursor-pointer @(CurrentState == CreatorPageState.Videos ? "active" : string.Empty)" @onclick="() => OnChangePage(CreatorPageState.Videos)">Videos</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link cursor-pointer @(CurrentState == CreatorPageState.Playlists ? "active" : string.Empty)" @onclick="() => OnChangePage(CreatorPageState.Playlists)">Playlists</a>
                </li>
            </ul>
        </div>
        <div class="row pt-3 row-cols-1">
            @switch (CurrentState)
            {
                case CreatorPageState.Home:
                {
                    <div class="col-12 row">
                        <VideoPlaylist OrderByNewest="@true" PlaylistName="Newest videos" CreatorId="CreatorId" HorizontalPlaylist="@true" ShowCreatorInfo="@false" VideoCount="5" />
                    </div>    
                    <div class="col-12 row">
                        <VideoPlaylist OrderByPopularity="@true" PlaylistName="Most popular" CreatorId="CreatorId" HorizontalPlaylist="@true" ShowCreatorInfo="@false" VideoCount="5" />
                    </div>  
                } break;
                case CreatorPageState.Videos:
                {
                    <VideoGrid CreatorId="CreatorId" ShowCreatorInfo="@false" />    
                } break;
                case CreatorPageState.Playlists:
                {
                    <CreatorPlaylists CreatorId="CreatorId" />
                } break;
            }
        </div>
    </div>
}

@code {
    [Parameter] public string? EncodedUserId { get; set; }

    private Guid CreatorId { get; set; }
    private UserModel? CreatorModel { get; set; }
    private bool IsSubscribed { get; set; }
    private long SubscriberCount { get; set; }
    private bool IsLoaded { get; set; }
    private CreatorPageState CurrentState { get; set; } = CreatorPageState.Home;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadContent();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadContent()
    {

        if (IsLoaded) return;
        CreatorId = EncodedUserId.FromEncodedId();
        if (EncodedUserId is null || CreatorId == Guid.Empty)
        {
            _navigationManager.NavigateTo("/", true);
            return;
        }

        var response = await _userHttpClient.GetCreatorProfile(CreatorId);
        if (!response.Success)
        {
            _navigationManager.NavigateTo("/", true);
            return;
        }

        CreatorModel = response.Creator;
        SubscriberCount = response.SubscriberCount;
        IsSubscribed = response.IsSubscribed;
        IsLoaded = true;
    }

    private async Task OnSubscribeCreator()
    {
        if (CreatorModel is null) return;
        if (IsSubscribed)
        {
            await _userHttpClient.Unsubscribe(Guid.Parse(CreatorModel!.Id));
            SubscriberCount--;
            IsSubscribed = false;
        }
        else
        {
            await _userHttpClient.Subscribe(Guid.Parse(CreatorModel!.Id));
            SubscriberCount++;
            IsSubscribed = true;
        }

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnChangePage(CreatorPageState state)
    {
        CurrentState = state;
        await InvokeAsync(StateHasChanged);
    }
}