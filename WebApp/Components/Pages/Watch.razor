@page "/watch/{EncodedVideoId}"
@using Domain.Constants
@using Domain.Interfaces
@using Domain.Model
@using Domain.Model.Configuration
@using Domain.Model.View
@rendermode InteractiveServer
@inject NavigationManager _navigationManager
@inject IVideoHttpClient _videoHttpClient
@inject AppConfiguration _configuration
<div class="p-3 container-fluid">
    <div class="row">
        <CascadingValue Value="Model" Name="Metadata">
            <div class="col-12 col-md-9 container-fluid">
                <div class="row">
                    <WatchView @ref="_watchView" />
                </div>
                <div class="row d-none d-md-block">
                    <CommentSection/>
                </div>
            </div>
            <div class="col-12 col-md-3 container-fluid">
                <div class="row row-cols-1">
                    <VideoPlaylist/>
                </div>
                <div class="row d-block d-md-none">
                    <CommentSection/>
                </div>
            </div>
        </CascadingValue>
    </div>
</div>
@code {
    [Parameter]
    public string? EncodedVideoId { get; set; }
    
    public VideoMetadataModel Model { get; set; }
    public List<ContentSourceModel> Sources { get; set; }
    private WatchView _watchView;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var id = EncodedVideoId.ToVideoId();
            if (EncodedVideoId is null || id == Guid.Empty)
            {
                _navigationManager.NavigateTo("/", true);
                await base.OnInitializedAsync();
                return;
            }
            var response = await _videoHttpClient.GetVideoMetadata(id);
            if (!response.Success)
            {
                _navigationManager.NavigateTo("/", true);
                await base.OnInitializedAsync();
                return;
            }
            Model = new VideoMetadataModel()
            {
                Description = response.Description,
                Title = response.Title,
                VideoId = Guid.Parse(response.VideoId)
            };
            Sources = response.ContentSources.ToList();
        }
        catch (NavigationException _) { } // Another js related exception we can ignore
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            await _watchView.InitVideoPlayer(Sources
                .Where((cs) => cs.Type == ContentSourceType.Video)
                .Select((cs, i) =>
                    new VideoSourceModel()
                    {
                        Label = cs.Resolution,
                        Selected = i == 0,
                        Src = $"{_configuration.ApiEndpoint}/api/Content/Source?videoId={Model.VideoId}&sourceId={cs.Id}",
                        Type = cs.ContentType
                    }).ToList());
        }
        await base.OnAfterRenderAsync(firstRender);
    }

}