@page "/watch/{EncodedVideoId}"
@attribute [StreamRendering]
@using Domain.Constants
@using Domain.Entity
@using Domain.Interfaces
@using Domain.Model
@using Domain.Model.Configuration
@using Domain.Model.View
@inject NavigationManager _navigationManager
@inject IVideoHttpClient _videoHttpClient
@inject IUserHttpClient _userHttpClient
@inject AppConfiguration _configuration

<PageTitle>Video player</PageTitle>
<div class="p-3 container-fluid">
    <div class="row">
        <CascadingValue Value="@Metadata" Name="Metadata">
            <CascadingValue Value="@Creator" Name="Creator">
            <div class="col-12 col-md-9">
                <WatchView @ref="_watchView" IsSubscribed="IsSubscribed" SubscriberCount="SubscriberCount"/>
            </div>
            </CascadingValue>
            <div class="col-12 col-md-3 video-playlist-block">
                <VideoPlaylist VideoCount="10"/>
            </div>
            <div class="col-12 col-md-6">
                <CommentSection @ref="_commentSection"/>
            </div>
        </CascadingValue>
    </div>
</div>
@code {
    [Parameter]
    public string? EncodedVideoId { get; set; }
    
    private VideoMetadataModel? Metadata { get; set; }
    private UserModel? Creator { get; set; }
    private List<ContentSourceModel> Sources { get; set; } = new List<ContentSourceModel>();

    private CommentSection _commentSection;
    private WatchView _watchView;
    private bool IsSubscribed { get; set; }
    private long SubscriberCount { get; set; }
    private bool IsMetadataLoaded { get; set; } = false;
    protected override Task OnInitializedAsync()
    {
        _navigationManager.LocationChanged += async (obj, args) =>  await OnLocationChanged(obj, args);
        return base.OnInitializedAsync();
    }

    private async Task LoadMetadata()
    {
        var id = EncodedVideoId.FromEncodedId();
        if (EncodedVideoId is null || id == Guid.Empty)
        {
            _navigationManager.NavigateTo("/", false, true);
            await base.OnInitializedAsync();
            return;
        }
        var response = await _videoHttpClient.GetVideoMetadata(id);
        if (!response.Success)
        {
            _navigationManager.NavigateTo("/", false, true);
            await base.OnInitializedAsync();
            return;
        }
        Metadata = response.Metadata;
        Sources = response.Metadata.ContentSources.ToList();
        var creatorResponse = await _userHttpClient.GetCreatorProfile(Metadata.CreatorId);
        if (!creatorResponse.Success)
        {
            _navigationManager.NavigateTo("/", false, true);
            await base.OnInitializedAsync();
            return;
        }
        Creator = creatorResponse.Creator;
        IsSubscribed = creatorResponse.IsSubscribed;
        SubscriberCount = creatorResponse.SubscriberCount;
        await InvokeAsync(StateHasChanged);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!IsMetadataLoaded)
        {
            await LoadMetadata();
            IsMetadataLoaded = true;
        }
        if (IsMetadataLoaded && !firstRender)
        {
            if (Metadata is null)
            {
                _navigationManager.NavigateTo("/", false, true);
                await base.OnAfterRenderAsync(firstRender);
                return;
            }

            await _watchView.InitVideoPlayer(Sources
                .Where((cs) => cs.Type == ContentSourceType.Video)
                .Select((cs, i) =>
                    new VideoSourceModel()
                    {
                        Label = cs.Resolution,
                        Selected = i == 0,
                        Src = $"{_configuration.ApiEndpoint}/api/Content/Source?videoId={Metadata.VideoId}&sourceId={cs.Id}",
                        Type = cs.ContentType
                    }).ToList());
            await _commentSection.LoadCommentSection(Metadata.VideoId);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        IsMetadataLoaded = false;
    }

}